<?php

namespace App\Http\Controllers;

use App\Models\Charts;
use App\Models\Currency;
use App\Models\Market;
use App\Models\User;
use App\Models\Apikey;
use App\Models\Xchange;
use App\Models\XchangInfo;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;

class MarketController extends Controller
{

    public function show($market_name)
    {
        $user_id = Auth::id();
        $market_id = Market::where('market_name',$market_name)->value('id');
       /* if(!$market_id) {
            return redirect('trade');
        }*/
        //TODO 获取余额，获取兑换的市场对应的余额
        $currency = explode('_',$market_name);


        //TODO 记录最新的价格
        $bid = DB::select("SELECT market_id,type,last_price FROM xchange_info WHERE market_id = ? AND type = ? ORDER BY created_at DESC LIMIT 1",[$market_id,1]);
        $ask  = DB::select("SELECT market_id,type,last_price FROM xchange_info WHERE market_id = ? AND type = ? ORDER BY created_at DESC LIMIT 1",[$market_id,2]);
        if(is_null($bid) || is_null($ask)) {
            $nova_market = $currency[1].'_'.$currency[0];
            $rate_api = "https://novaexchange.com/remote/v2/market/info/$nova_market/";
            $res = file_get_contents($rate_api);
            $result = json_decode($res,true);
            if($result['status'] == 'success') {
                if(is_null($bid))
                    $bid = $result['markets'][0]['bid'];
                if(is_null($ask))
                $ask = $result['markets'][0]['ask'];
            }
        }
        foreach ($currency as $key=>$value) {
            $client[$value] = $this->getAllClicent($value);
            if(!$client[$value]) {
                return redirect('trade');
            }
            $balances[$value] = $client[$value]->getBalance($user_id);
        }
        $market = Currency::where(['currency'=>$currency[0]])->orWhere(['currency'=>$currency[1]])->get();
        $history = $this->showHistory($market_id);

        return view('front.market',compact('ask','bid','balances','currency','market','history','market_id'));
    }

    /**
     * @未完成的挂单
     * @param market_id , type (买或卖)
     * @return
     */
    public function unCompeleteOrder(Request $request)
    {

        $this->validate($request,['market_id'=>'required']);

        $where = ['market_id'=>$request->market_id,'status'=>0];
        $order = Xchange::where($where)->get();
        if (count($order)) {
            $order = $order->groupBy('type')->sortBy('price')->toArray();
            if(!empty($order[2])) {
                $order['buy'] = $order[2];
                unset($order[2]);
            }
            if(!empty($order[1])) {
                $order['sell'] = $order[1];
                unset($order[1]);
            }
        } else {
            $order = [];
        }
        return ['code'=>200,'msg'=>$order];
    }

    //TODO 独立页面的订单显示，新增订单是即时刷新对应的订单列表
    public function sellOrder()
    {
        
    }

    public function showHistory($market_id=null)
    {

        $data = is_null($market_id) ? [] : XchangInfo::where('market_id',$market_id)->orderBy('created_at','desc')->take(30)->get();
        return $data;
      //  return ['code'=>200,'message'=>$data];
    }

    public function doScript(Request $request)
    {
        sleep(10);
        $this->doTrade($request);
        $this->doScript($request);
    }


    public function doTrade(Request $request)
    {
        /*$this->validate($request,[
            'method'            => 'required',
            'vol'               => 'required|string',
            'price'             => 'required|numeric|min:0.00000001',
            'total'             => 'required|numeric|min:0.00000001',
            'fee'               => 'required|numeric',
            'market'            => 'required',
            'buy_net_total'     => 'required|numeric',
        ]);*/
        // xchange 表 删除了total_btc_price字段
        //TODO 各种判断验证    market_id
            dd($request->all());
//        $request->vol = rand(10,100);
//        $request->price = rand(10,25);
//        $request->vol = rand(1,100);
//        $request->fee = 0.000001;
//        $arr = ['buy','sell'];
//        $request->type = $arr[rand(0,1)];
        DB::beginTransaction();
        try {
            if($request->type == 'buy') {
                $this->buy($request->market,$request->vol,$request->price,$request->vol,$request->fee);
            } elseif ($request->type == 'sell') {
                $this->sell($request->market,$request->vol,$request->price,$request->vol,$request->fee);
            } else {
                DB::rollback();
                return ['code'=>400];
            }
            DB::commit();
            return ['code'=>200];
        } catch (Exception $e) {
            DB::rollback();
            return ['code'=>400];
        }

        return;

        $user_id = \Auth::id();
        $data = Apikey::where('user_id',$user_id)->first();
        $key = decrypt($data->key);
        $secret = decrypt($data->secret);
        $market = substr($request->get('market'),strpos($request->get('market'),'/')+1);
        $url = 'https://novaexchange.com/remote/v2/private/trade/'.$market.'/';
        $data = [
                    'tradetype'     =>  strtoupper($request->get('method')),
                    'tradeamount'   =>  $request->get('buy'),
                    'tradeprice'    =>  $request->get('price'),
                    'tradebase'     =>  (boolval('0')),
        ];
        /*dd(round($data['tradeamount'] * $data['tradeprice'],8));*/
        $result = $this->doConnectAPI($url,$key,$secret,$data);
        $result = json_decode($result,true);
        /*
         *  error:
         *  Not enough balance for the wanted trade                                 ||  余额不足
         *  Amount or price cannot be less than 0.00000001 or Non existant          ||  数量或价格不能低于0.00000001或不存在
         *  Fee must add up to 0.00000020 BTC or higher, your fee was 0.00000000    ||  费必须总计达0.00000020 BTC或更高，你的费用是0
         *  Errors in trade request, please correct                                 ||  交易请求错误，请改正
         *  ....
         *
         *
         * success:
         * "status" => "success"
            "message" => "Trade details as follows"
            "tradetype" => "BUY"
            "tradeitems" => array:1
            [
                0 => [
                "orderid" => 24401553
                "net_total" => "9979.00200000"
                "fromcurrency" => "BTC"
                "tocurrency" => "FAL"
                "price" => "0.00000002"
                "type" => "created"
                "tradefee" => "0.00000040"
                "fromamount" => "0.00019998"
                "toamount" => "9999.00000000"
                ]
            ]
            "fee_currency" => "BTC"
         *
         *
         *
         * */
        //后续在加入更精确的状态返回值
        if($result['status'] == 'error') {
            return [
                'code'      => 400,
                'message'   => $result['message']
            ];
        }else if($result['status'] == 'success') {
            return [
                'code'          =>  200,
                'orderid'       => $result['tradeitems'][0]['orderid'],
                'fromcurrency'  => $result['tradeitems'][0]['fromcurrency'],
                'tocurrency'    => $result['tradeitems'][0]['tocurrency'],
                'price'         => $result['tradeitems'][0]['price'],
                'tradefee'      => $result['tradeitems'][0]['tradefee'],
                'price'         => $result['tradeitems'][0]['price'],
                'fromamount'    => $result['tradeitems'][0]['fromamount'],
                'toamount'      => $result['tradeitems'][0]['toamount']
            ];
        }
    }

    public function getAmount(Request $request,$mark_name)
    {
        $user_id = Auth::id();
        $data = Apikey::where('user_id',$user_id)->first();
        $key = decrypt($data->key);
        $secret = decrypt($data->secret);
        $balances = $this->getbalance($key,$secret);
        $market_info_url = 'https://novaexchange.com/remote/v2/market/info/'.$mark_name.'/';
        ini_set('user_agent','Mozilla/4.0 (compatible; MSIE 5.00; Windows 98)');
        $result = file_get_contents($market_info_url);
        $result = json_decode($result,true);
        $market_info = $result['markets'][0];
        return ['amount'=>$balances['BTC']['amount']];
    }

    private function sell($market_id,$vol,$price,$original_vol,$fee=0){

        $row = DB::table('xchange')->where([
                        ['status','0'],
                        ['rvolume','>',0],
                        ['type',2],
                        ['price','>=',$price]]
                )->orderBy('price','desc')->first();
        if($row){
            if($vol > $row->rvolume) {
                DB::table('xchange')->where('id',$row->id)->update(['rvolume'=>0,'status'=>1,'updated_at'=>date('Y-m-d H:i:s',time())]);
                DB::table('xchange_info')->insert(['type'=>1,'market_id'=>$market_id,'last_price'=>$row->price,'volume'=>$row->rvolume,'created_at'=>time(),'updated_at'=>time()]);
                $vol = $vol - $row->rvolume;
                $this->sell($market_id,$vol,$price,$vol,$fee);
            } else {
                $rvolume = $row->rvolume - $vol;
                DB::table('xchange')->where('id',$row->id)->update(['rvolume'=>$rvolume,'updated_at'=>date('Y-m-d H:i:s',time())]);
                DB::table('xchange_info')->insert(['type'=>1,'market_id'=>$market_id,'last_price'=>$row->price,'volume'=>$vol,'created_at'=>time(),'updated_at'=>time()]);
            }
        } else {
            DB::table('xchange')->insert(['type'=>1,'market_id'=>$market_id,'user_id'=>\Auth::id(),'price'=>$price,'volume'=>$vol,'rvolume'=>$original_vol,'status'=>0,'fee'=>$fee,'created_at'=>date('Y-m-d H:i:s',time()),'updated_at'=>date('Y-m-d H:i:s',time())]);
        }
    }

    private function buy($market_id,$vol,$price,$original_vol,$fee=0){
        $row = DB::table('xchange')->where([
                ['status',0],
                ['rvolume','>',0],
                ['type',1],
                ['price','<=',$price]]
        )->orderBy('price','asc')->first();
        if($row){
            if($vol > $row->rvolume) { //rvolume 要买的数量大于未成交的数量
               DB::table('xchange')->where(['id'=>$row->id])->update(['rvolume'=>0,'status'=>1,'updated_at'=>date('Y-m-d H:i:s',time())]);
                DB::table('xchange_info')->insert(['type'=>1,'market_id'=>$market_id,'last_price'=>$row->price,'volume'=>$row->rvolume,'created_at'=>time(),'updated_at'=>time()]);
                $vol = $vol - $row->rvolume; //未成交的数量
                $this->buy($market_id,$vol,$price,$vol,$fee); //还有未成交的继续买
            } else {
                $rvolume = $row->rvolume - $vol; //要买的数量小于未成交的数量
                DB::table('xchange')->where(['id'=>$row->id])->update(['rvolume'=>$rvolume,'updated_at'=>date('Y-m-d H:i:s',time())]);
                DB::table('xchange_info')->insert(['type'=>2,'market_id'=>$market_id,'last_price'=>$row->price,'volume'=>$vol,'created_at'=>time(),'updated_at'=>time()]);
            }
        } else {
            DB::table('xchange')->insert(['type'=>2,'market_id'=>$market_id,'user_id'=>\Auth::id(),'price'=>$price,'volume'=>$vol,'rvolume'=>$original_vol,'status'=>0,'fee'=>$fee,'created_at'=>date('Y-m-d H:i:s',time()),'updated_at'=>date('Y-m-d H:i:s',time())]);
        }
    }

    public function getApiData(Request $request)
    {
        $this->validate($request,['stamp'=>'required','market_id'=>'required']);
        $gap = $request->stamp ? $request->stamp : 1;
        $num = 100;
        $res = Charts::where('gap',$gap)->where('market_id',$request->market_id)->orderBy('id','asc')->take($num)->get()->toArray();
        return $res;
        return ['code'=>200,'result'=>$res];
    }

    public function testa()
    {
        $res = getRate('falcoin');
        dd($res);
    }


}
